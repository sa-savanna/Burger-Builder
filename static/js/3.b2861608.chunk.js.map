{"version":3,"sources":["components/Burger/Order/CheckoutSummary.module.css","containers/Checkout/ContactData.module.css","components/UI/Input/Input.module.css","components/Burger/Order/CheckoutSummary.js","components/UI/Input/Input.js","containers/Checkout/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","CheckoutSummary","props","className","classes","Checkout","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCanceled","checkoutContinued","Input","inputElement","inputClasses","invalid","shouldValidate","touched","push","Invalid","validationError","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","connect","state","ings","burgerBuilder","price","totalPrice","loading","orders","dispatch","onOrderBurger","orderData","purchaseBurger","errorHandler","useState","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","setState","formElementArray","id","config","form","onSubmit","e","preventDefault","console","log","formData","el","order","inputIndetifier","updateOrderForm","updatedFormElement","target","rules","isValid","trim","length","isEmail","test","checkValidity","inputId","inputChangeHandler","disabled","Spinner","ContactData","axiosData","purchased","summary","to","purchaseRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.b2861608.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"CheckoutSummary_Checkout__2KV8-\",\"Order\":\"CheckoutSummary_Order__2UvSX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__iZktk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","import React from 'react'\nimport Button from '../../UI/Button/Button'\nimport Burger from '../Burger'\nimport classes from \"./CheckoutSummary.module.css\"\n\n\nconst CheckoutSummary = (props) => {\n    return (\n        <div className={classes.Checkout}>\n            <h1>We hope you like it!</h1>\n            <div style={{ width: \"100%\",  margin: \"auto\" }}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button btnType=\"Danger\" clicked={props.checkoutCanceled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    )\n}\n\nexport default CheckoutSummary\n","import React from 'react'\nimport classes from \"./Input.module.css\";\n\n\nconst Input = props => {\n    let inputElement = ''\n    const inputClasses = [classes.Input]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    let validationError = null;\n    if (props.invalid && props.touched) {\n        validationError = <p>Please enter a valid value!</p>;\n    }\n\n    switch (props.elementType) {\n        case (\"input\"):\n            inputElement = <input className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('textarea'):\n            inputElement = <textarea className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}\n                >\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            )\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />\n            break;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n}\n\nexport default Input\n","import React, { useState } from 'react'\nimport Button from '../../components/UI/Button/Button'\nimport classes from './ContactData.module.css'\nimport axiosData from '../../axios-orders'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport Input from '../../components/UI/Input/Input'\nimport { connect } from \"react-redux\";\nimport errorHandler from '../../components/UI/ErrorHandle/errorHandler'\nimport { purchaseBurger } from \"../../store/action/index\";\n\n\nconst ContactData = (props) => {\n    const [state, setState] = useState({\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            }\n        },\n\n        formIsValid: false\n    })\n\n    const orderHandler = (e) => {\n        e.preventDefault();\n        console.log(props.ings);\n\n\n        const formData = {};\n        for (let el in state.orderForm) {\n            formData[el] = state.orderForm[el].value //value = name, email ...\n        }\n        const order = {\n            ingredients: props.ings,\n            price: props.price,\n            orderData: formData\n        }\n        props.onOrderBurger(order)\n\n\n    }\n\n    const checkValidity = (value, rules) => {\n        let isValid = true\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n\n        return isValid\n    }\n\n    const inputChangeHandler = (e, inputIndetifier) => {\n        // console.log(e.target.value);\n        \n        const updateOrderForm = {\n            ...state.orderForm\n        } //create a copy of all object\n\n        const updatedFormElement = {\n            ...updateOrderForm[inputIndetifier]\n        } //here we get into one item of an object, here we need a value = '' (to het deeper, we need to create a clone (...) again)\n        updatedFormElement.value = e.target.value\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation)\n        updatedFormElement.touched = true;\n        updateOrderForm[inputIndetifier] = updatedFormElement\n\n        let formIsValid = true\n        for (let inputId in updateOrderForm) {\n            formIsValid = updateOrderForm[inputId].valid && formIsValid\n        }\n        setState({ orderForm: updateOrderForm, formIsValid: formIsValid })\n    }\n\n    const formElementArray = [];\n    for (let key in state.orderForm) {\n        formElementArray.push({\n            id: key,\n            config: state.orderForm[key]\n        })\n    }\n\n\n    let form = (\n        <form onSubmit={orderHandler} >\n            { formElementArray.map(el => (\n                <Input\n                    key={el.id}\n                    elementType={el.config.elementType}\n                    elementConfig={el.config.elementConfig}\n                    value={el.config.value}\n                    invalid={!el.config.valid}\n                    touched={el.config.touched}\n                    shouldValidate={el.config.validation}\n                    changed={(e) => inputChangeHandler(e, el.id)}\n                />\n            ))}\n            <Button btnType=\"Success\" disabled={!state.formIsValid} >ORDER</Button>\n        </form>\n    )\n\n    props.loading && (form = <Spinner />)\n\n    return (\n        <div className={classes.ContactData}>\n            <h4>Enter your contact data</h4>\n            {form}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.orders.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData) => dispatch(purchaseBurger(orderData)),\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(errorHandler(ContactData, axiosData))\n","import React from 'react'\nimport CheckoutSummary from '../../components/Burger/Order/CheckoutSummary'\nimport { Route, Redirect } from 'react-router-dom';\nimport ContactData from './ContactData';\nimport { connect } from \"react-redux\";\n\n\nconst Checkout = (props) => {\n\n   \n    const checkoutCanceled = () => {\n        props.history.goBack()\n    }\n    const checkoutContinued = () => {\n        props.history.replace('/checkout/contact-data')\n    }\n\n    let summary = <Redirect to=\"/\" />\n    if (props.ings) {\n        const purchaseRedirect = props.purchased && <Redirect to=\"/\" />\n\n        summary = (\n            <div>\n                {purchaseRedirect}\n                <CheckoutSummary\n                    ingredients={props.ings}\n                    checkoutCanceled={checkoutCanceled}\n                    checkoutContinued={checkoutContinued}\n                />\n                <Route\n                    path={props.match.path + '/contact-data'}\n                    component={ContactData}\n                />\n            </div>\n\n        )\n    }\n    return summary\n\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.orders.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout)\n"],"sourceRoot":""}