{"version":3,"sources":["components/Burger/Order/CheckoutSummary.module.css","components/Burger/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","ingredients","price","ingredientss","ingName","push","name","amount","ingOutput","map","ig","key","style","textTransform","display","margin","border","padding","className","classes","toFixed","connect","state","orders","loading","dispatch","onFetchOrders","fetchOrders","errorHandler","props","useEffect","listOrders","Spinner","order","id","axiosData"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,SAAW,kCAAkC,MAAQ,iC,4ECkCxDC,EA/BD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACpBC,EAAe,GAErB,IAAK,IAAIC,KAAWH,EAChBE,EAAaE,KAAK,CACdC,KAAMF,EACNG,OAAQN,EAAYG,KAI5B,IAAMI,EAAYL,EAAaM,KAAI,SAAAC,GAC/B,OAAO,0BACHC,IAAKD,EAAGJ,KACRM,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,QAEfP,EAAGJ,KATE,IASKI,EAAGH,OATR,QAYX,OACI,yBAAKW,UAAWC,IAAQnB,OACpB,2CAAiBQ,EAAjB,KACA,qCAAU,0CAAWN,EAAMkB,QAAQ,IAAnC,O,wCCgBGC,uBAbS,SAAAC,GACpB,MAAO,CACHC,OAAQD,EAAMC,OAAOA,OACrBC,QAASF,EAAMC,OAAOC,YAIH,SAAAC,GACvB,MAAO,CACHC,cAAe,kBAAMD,EAASE,mBAIvBN,CAA6CO,aAtC7C,SAACC,GAAW,IACfH,EAAkBG,EAAlBH,cAERI,qBAAU,WACNJ,MACD,CAACA,IAEJ,IAAIK,EAAa,kBAACC,EAAA,EAAD,MAcjB,OAZKH,EAAML,UACPO,EACIF,EAAMN,OAAOd,KAAI,SAAAwB,GAAK,OAClB,kBAAC,EAAD,CACItB,IAAKsB,EAAMC,GACXjC,YAAagC,EAAMhC,YACnBC,OAAQ+B,EAAM/B,YAMvB,6BAAM6B,KAiBgEI","file":"static/js/4.133e3ec2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"CheckoutSummary_Checkout__2KV8-\",\"Order\":\"CheckoutSummary_Order__2UvSX\"};","import React from 'react'\nimport classes from \"./CheckoutSummary.module.css\"\n\n\nconst Order = ({ ingredients, price }) => {\n    const ingredientss = []\n\n    for (let ingName in ingredients) {\n        ingredientss.push({\n            name: ingName,\n            amount: ingredients[ingName]\n        })\n    }\n\n    const ingOutput = ingredientss.map(ig => {\n        return <span\n            key={ig.name}\n            style={{\n                textTransform: 'capitalize',\n                display: 'inline-block',\n                margin: '0 8px',\n                border: '1px solid #ccc',\n                padding: '5px'\n            }}\n        >{ig.name}({ig.amount})</span>\n    })\n\n    return (\n        <div className={classes.Order}>\n            <p>Ingredients: {ingOutput} </p>\n            <p>Price: <strong>â‚¬ {price.toFixed(2)}</strong> </p>\n        </div>\n    )\n}\n\nexport default Order\n","import React, { useEffect } from 'react'\nimport Order from '../../components/Burger/Order/Order'\nimport axiosData from '../../axios-orders'\nimport errorHandler from '../../components/UI/ErrorHandle/errorHandler'\nimport { fetchOrders } from \"../../store/action/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst Orders = (props) => {\n    const { onFetchOrders } = props\n\n    useEffect(() => {\n        onFetchOrders()\n    }, [onFetchOrders])\n\n    let listOrders = <Spinner />\n\n    if (!props.loading) {\n        listOrders = (\n            props.orders.map(order => (\n                <Order\n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={+order.price}\n                />\n            ))\n        )\n    }\n\n    return <div>{listOrders}</div>\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.orders.orders, //orders => rootReducer(index.js) and orders => initialState\n        loading: state.orders.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: () => dispatch(fetchOrders()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(errorHandler(Orders, axiosData))\n"],"sourceRoot":""}